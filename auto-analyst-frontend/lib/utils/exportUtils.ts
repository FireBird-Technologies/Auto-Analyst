import { marked } from 'marked';

/**
 * Exports content as a downloadable file
 * @param content The content to be downloaded
 * @param format The format of the file (md or html)
 * @param filename Optional custom filename
 */
export function exportContent(content: string, format: 'md' | 'html', filename?: string): void {
  let processedContent = content;
  let mimeType = 'text/plain';
  let extension = 'txt';
  
  if (format === 'html') {
    // Convert markdown to HTML first
    const htmlContent = marked.parse(content);
    
    // Create HTML version with enhanced styling
    processedContent = `<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Auto Analyst Export</title>
  <!-- Add highlight.js for Python syntax highlighting -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/github.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/languages/python.min.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', (event) => {
      document.querySelectorAll('pre code').forEach((el) => {
        hljs.highlightElement(el);
      });
    });
  </script>
  <style>
    :root {
      --primary-color: #FF7F7F;
      --text-color: #333;
      --bg-color: #fff;
      --code-bg: #f5f5f5;
      --border-color: #e5e5e5;
    }
    html, body { 
      background-color: #fff !important;
      margin: 0;
      padding: 0;
    }
    body { 
      font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif; 
      line-height: 1.6; 
      padding: 30px; 
      max-width: 800px; 
      margin: 0 auto; 
      color: var(--text-color);
      background-color: var(--bg-color) !important;
    }
    h1, h2, h3, h4, h5, h6 { 
      color: var(--primary-color);
      margin-top: 24px;
      margin-bottom: 16px;
      font-weight: 600;
      line-height: 1.25;
    }
    h1 { font-size: 2em; }
    h2 { font-size: 1.5em; }
    h3 { font-size: 1.25em; }
    pre { 
      background-color: var(--code-bg);
      padding: 16px;
      border-radius: 6px;
      overflow-x: auto;
      margin: 16px 0;
      font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, monospace;
      font-size: 14px;
      border-left: 4px solid var(--primary-color);
    }
    code { 
      font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, monospace;
      font-size: 0.9em;
    }
    .hljs {
      background-color: var(--code-bg) !important;
      padding: 0;
    }
    table { 
      border-collapse: collapse; 
      width: 100%;
      margin: 16px 0; 
    }
    th, td { 
      border: 1px solid var(--border-color);
      padding: 8px 12px;
      text-align: left;
    }
    th { 
      background-color: var(--primary-color);
      color: white;
      font-weight: 600;
    }
    tr:nth-child(even) {
      background-color: #f9f9f9;
    }
    blockquote {
      border-left: 4px solid var(--primary-color);
      margin: 16px 0;
      padding: 0 16px;
      color: #555;
    }
    a {
      color: var(--primary-color);
      text-decoration: none;
    }
    a:hover {
      text-decoration: underline;
      color: #e06e6e;
    }
    ul, ol {
      padding-left: 24px;
    }
    li::marker {
      color: var(--primary-color);
    }
    .content {
      padding: 24px;
      border-radius: 8px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      margin-bottom: 30px;
      border-top: 5px solid var(--primary-color);
      background-color: #fff;
    }
    .footer {
      text-align: center;
      margin-top: 40px;
      padding-top: 20px;
      border-top: 1px solid var(--primary-color);
      color: var(--primary-color);
      font-size: 14px;
    }
    /* Override dark mode entirely to ensure white background */
    @media (prefers-color-scheme: dark) {
      :root {
        --text-color: #333;
        --bg-color: #fff;
        --code-bg: #f5f5f5;
        --border-color: #e5e5e5;
      }
      body {
        background-color: #fff !important;
        color: #333 !important;
      }
      h1, h2, h3, h4, h5, h6 {
        color: var(--primary-color);
      }
      a {
        color: var(--primary-color);
      }
      a:hover {
        color: #e06e6e;
      }
      tr:nth-child(even) {
        background-color: #f9f9f9;
      }
      pre, code {
        background-color: #f5f5f5;
      }
    }
  </style>
</head>
<body>
  <div class="content">
    ${htmlContent}
  </div>
  <div class="footer">
    Generated by <a href="https://autoanalyst.ai" style="text-decoration: underline;">Auto-Analyst</a> | ${new Date().toLocaleDateString()}
  </div>
</body>
</html>`;
    mimeType = 'text/html';
    extension = 'html';
  } else if (format === 'md') {
    // Keep as is for markdown
    mimeType = 'text/markdown';
    extension = 'md';
  }
  
  // Generate filename if not provided
  const outputFilename = filename || `auto-analyst-export-${Date.now()}.${extension}`;
  
  // Create and download the file
  const blob = new Blob([processedContent], { type: mimeType });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = outputFilename;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
}

/**
 * Creates a download handler function for a specific message
 * @param content The content to be downloaded
 * @returns A function that handles downloading the content
 */
export function createDownloadHandler(content: string) {
  return (format: 'md' | 'html') => {
    exportContent(content, format);
  };
} 