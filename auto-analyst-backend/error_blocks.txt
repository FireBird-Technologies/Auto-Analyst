[('planner_statistical_analytics_agent', "# planner_statistical_analytics_agent code start\n\nimport pandas as pd\n\n# Assuming cleaned_data is the DataFrame passed along with the plan instructions\ndef analyze_trends(cleaned_data):\n    # Convert binary categorical variables to boolean\n    binary_cols = ['mainroad', 'guestroom', 'basement', 'hotwaterheating', 'airconditioning', 'prefarea']\n    for col in binary_cols:\n        cleaned_data[col] = cleaned_data[col].map({'yes': 1, 'no': 0})\n\n    # One-hot encoding for furnishingstatus\n    cleaned_data = pd.get_dummies(cleaned_data, columns=['furnishingstatus'], drop_first=True)\n\n    # Normalizing price and area\n    cleaned_data['normalized_price'] = (cleaned_data['price'] - cleaned_data['price'].mean()) / cleaned_data['price'].std()\n    cleaned_data['normalized_area'] = (cleaned_data['area'] - cleaned_data['area'].mean()) / cleaned_data['area'].std()\n\n    # Calculate correlation matrix\n    correlation_matrix = cleaned_data.corr()\n\n    # Extract key insights\n    insights = {\n        'correlation_with_price': correlation_matrix['price'].sort_values(ascending=False).to_dict(),\n        'average_price_by_bedrooms': cleaned_data.groupby('bedrooms')['price'].mean().to_dict(),\n        'average_price_by_furnishing': cleaned_data.groupby('furnishingstatus_semi-furnished')['price'].mean().to_dict(),\n    }\n\n    # Create analysis results\n    analysis_results = {\n        'correlation_matrix': correlation_matrix,\n        'insights': insights\n    }\n    \n    return analysis_results\n\n# Execute analysis\nanalysis_results = analyze_trends(cleaned_data)\nprint(analysis_results)\n\n# planner_statistical_analytics_agent code end", 'Error in planner_statistical_analytics_agent: name \'cleaned_data\' is not defined\nTraceback (most recent call last):\n  File "D:\\Firebird2\\Auto-Analyst-CS\\auto-analyst-backend\\scripts\\format_response.py", line 318, in execute_code_from_markdown\n    ~~~~^^^^^^^^^^^^^^^^^^^^^\n  File "<string>", line 37, in <module>\nNameError: name \'cleaned_data\' is not defined'), ('planner_data_viz_agent', '# planner_data_viz_agent code start\n\nimport plotly.express as px\nimport pandas as pd\n\n# Assuming cleaned_data and analysis_results are already defined\nif len(cleaned_data) > 50000:\n    cleaned_data = cleaned_data.sample(5000, random_state=42)\n\n# Create a scatter plot for Price vs Area\nfig = px.scatter(cleaned_data, \n                 x=\'area\', \n                 y=\'price\', \n                 title=\'<b>Price vs Area Scatter Plot</b>\',\n                 color=\'bedrooms\',  # Use bedrooms to differentiate points\n                 labels={\'area\': \'<b>Living Area (sq ft)</b>\', \'price\': \'<b>Price (in millions)</b>\'},\n                 hover_data=[\'bedrooms\', \'bathrooms\', \'furnishingstatus\'])\n\n# Customize layout\nfig.update_traces(marker=dict(size=10, opacity=0.7), selector=dict(mode=\'markers\'))\nfig.update_layout(template=\'plotly_white\', \n                  height=1200, \n                  width=1000,\n                  xaxis=dict(linecolor=\'black\', linewidth=0.2, gridwidth=1),\n                  yaxis=dict(linecolor=\'black\', linewidth=0.2, gridwidth=1))\n\n# Annotate min and max\nmin_price = cleaned_data[\'price\'].min()\nmax_price = cleaned_data[\'price\'].max()\nmin_area = cleaned_data[\'area\'].min()\nmax_area = cleaned_data[\'area\'].max()\n\nfig.add_annotation(x=min_area, y=min_price, text="Min", showarrow=True, arrowhead=1)\nfig.add_annotation(x=max_area, y=max_price, text="Max", showarrow=True, arrowhead=1)\n\n# Display the figure\nfig.show()\n\n# planner_data_viz_agent code end', 'Error in planner_data_viz_agent: name \'cleaned_data\' is not defined\nTraceback (most recent call last):\n  File "D:\\Firebird2\\Auto-Analyst-CS\\auto-analyst-backend\\scripts\\format_response.py", line 318, in execute_code_from_markdown\n    ~~~~^^^^^^^^^^^^^^^^^^^^^\n  File "<string>", line 6, in <module>\nNameError: name \'cleaned_data\' is not defined')]